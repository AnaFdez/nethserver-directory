#!/usr/bin/perl -w
#----------------------------------------------------------------------
# Copyright (C) 2005 Nethesis <support@nethesis.it>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License or more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#----------------------------------------------------------------------

use strict;
use Time::Local;
use esmith::ConfigDB;
use esmith::AccountsDB;
use Text::Template;

my @month_list = ('Jan', 'Feb',
    'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');

my $conf = esmith::ConfigDB->open_ro or die "Couldn't open ConfigDB\n";
my $accounts = esmith::AccountsDB->open_ro or die "Couldn't open AccountsDB\n";

my $domain = $conf->get_value("DomainName") || 'localhost';

sub getUserInChageWarning()
{
    my %users_list;
    my $warning_days = $conf->get_prop("passwordstrength", "PassWarning") || "7";

    foreach my $user ($accounts->get_all_by_prop(type => 'user', PasswordSet => 'yes'))
    {
        my $userName = $user->key();
        my $oldLang = $ENV{'LANG'} || 'C';

        $ENV{'LANG'} = 'C'; # chage will use english months names
        
        foreach my $line (qx(/usr/sbin/lchage -l $userName))
        {
            if($line =~ m/Password Expires\W*:\W*(\w+)\W+(\d+)\W+(\d+)/i)
            {
                my ($mon, $day, $year) = (-1, $2, $3);

                for (my $i = 0; $i < scalar @month_list; $i++)
                    { if ($1 eq $month_list[$i]) { $mon = $i; } }

                if ($mon == -1) { die "Couldn't identify a month name"; }

                my $remaining_days =
                    (timelocal(0, 0, 0, $day, $mon, $year) - time()) / 86400;

                if ($remaining_days < int $warning_days)
                {
                    $users_list{$userName} = {
                        username => $userName,
                        daysleft => int $remaining_days,
                        fullname =>
                            $user->prop('FirstName')." ".
                            $user->prop('LastName')
                    }; 
                }
            }
        }

        $ENV{'LANG'} = $oldLang; # restoring old language
    }

    return %users_list;
}

sub alertUsersInChageWarning($$)
{
    my ($conf, $usersInChageWarning) = @_;

    return unless keys %$usersInChageWarning;

    foreach my $user (keys %$usersInChageWarning)
    {
        my $templates = '/etc/e-smith/templates';
        my $source = '/usr/lib/neth-privacy/userInChageWarning.tmpl';

        # Use templates-custom version by preference if it exists
        -f "${templates}-custom${source}" and $templates .= "-custom";

        my $t = new Text::Template(TYPE => 'FILE',
                    SOURCE => "${templates}${source}");

        open(QMAIL, "|/var/qmail/bin/qmail-inject -fdo-not-reply\@$domain $user")
            || die "Could not send mail via qmail-inject!\n";

        print QMAIL $t->fill_in( HASH => {
            conf   => \$conf,
            data   => $usersInChageWarning->{$user}
        });

        close QMAIL;
    }
}

my $expires = $conf->get_prop("passwordstrength", "PassExpires") || 'yes';

if ($expires eq 'yes')
{
    my %usr_list = getUserInChageWarning();
    alertUsersInChageWarning($conf, \%usr_list);
}

exit(0);

