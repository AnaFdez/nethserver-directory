#!/usr/bin/perl -w
use strict;

use Net::LDAP;
use Net::LDAP::LDIF;
use Authen::SASL;

my $Ldap;

sub mergeEntry
{
    my $entry = shift;
    my $message;
    
    if(hasEntry($entry)) {
	$entry->changetype('modify');
    } else {
	$entry->changetype('add');
    }

    $message = $entry->update($Ldap);
    if($message->is_error()) {
	die('Merge of `' . $entry->dn() . '` failed: ' . $message->server_error());
    }
}

sub hasEntry
{
    my $entry = shift;
    my $searchResult;

    $searchResult = $Ldap->search(
	filter => $entry->dn() ,
	attrs => [],
	sizelimit => 1,
	typesonly => 1
	);
	    
    return $searchResult->count() > 0;  
}

#
# Connection setup
#
sub ldapBind
{
    my $LDAPURL = shift;
    my $Ldap = Net::LDAP->new($LDAPURL) or die("Can't connect $LDAPURL");
    my $sasl = Authen::SASL->new(mechanism=>'EXTERNAL');   
    $Ldap->bind(anonymous=>0, sasl => $sasl) or die ("Can't bind to $LDAPURL");
    return $Ldap;
}


#
# Loop on STDIN reading ldif entries:
#
sub readLdif
{
    open(my $fh, "<-");   
    my $ldif = Net::LDAP::LDIF->new($fh);
    my $entry;

    while( not $ldif->eof ( ) ) {
	$entry = $ldif->read_entry ( );
	if ( $ldif->error ( ) ) {
	    print "Error msg: ", $ldif->error ( ), "\n";
	    print "Error lines:\n", $ldif->error_lines ( ), "\n";
	} else {
	    mergeEntry($entry);
	}
    }
    $ldif->done();   
}


$Ldap = ldapBind('ldapi://');
readLdif();
$Ldap->unbind();
