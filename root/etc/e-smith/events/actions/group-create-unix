#!/usr/bin/perl -w

#----------------------------------------------------------------------
# copyright (C) 1999-2005 Mitel Networks Corporation
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
# Technical support for this program is available from Mitel Networks 
# Please visit our web site www.mitel.com/sme/ for details.
#----------------------------------------------------------------------

package esmith;

use strict;
use Errno;
use esmith::AccountsDB;

my $accounts = esmith::AccountsDB->open
    or die "Could not open accounts DB";

my $errors = 0;
my $event = shift;
my $groupName = shift;

#------------------------------------------------------------
# Create the group
#------------------------------------------------------------

die "Groupname argument missing." unless defined ($groupName);

my $group = $accounts->get($groupName);

unless ($group && $group->prop('type') eq 'group')
{
    die "Account $groupName is not a group account; create group failed.\n";
}

my $lock = undef;
my $gid;
unless ($gid = $group->prop('Gid'))
{
    use esmith::lockfile;

    $lock = esmith::lockfile::LockFileOrWait("/var/lib/nethserver/db/accounts");
    $gid = $accounts->get_next_uid;
    $group->set_prop('Gid', $gid);
    unless ($group->prop('Uid'))
    {
	$group->set_prop('Uid', $gid);
    }
}
my $uid = $group->prop('Uid');


# Create the user's unique group first
system(
	"/usr/sbin/lgroupadd",
	"-g", $gid,
	$groupName
    ) == 0 or die "Failed to create group $groupName.\n";

# Now create the dummy user account. NOTE: `--surname` triggers
# inetOrgPerson schema in ldapEntry and is required for
# nethserver-directory to work.
system(
    "/usr/sbin/luseradd",
    "-u", $uid,
    "-g", $gid,
    '--surname', $groupName,
    '-d', '/home/e-smith',
    '-s', '/bin/false',
    $groupName
    ) == 0 or die "Failed to create user $groupName.\n";

# Release lock if we have one
$lock && esmith::lockfile::UnlockFile($lock);

# `admin` user is implicit member of all groups; NOTE: libuser 0.56
# with ldap backend seems to fail silently when asked to remove all
# the members of a group; admin here ensure the group contains a
# member at least - Davide Principi <davide.principi@nethesis.it>
if(system("/usr/sbin/lgroupmod", '-M', 'admin', $groupName) != 0) {
    warn "Failed to add `admin` user in group `$groupName` members list.\n";
    $errors ++;
}

exit ($errors == 0 ? 0 : 1);
