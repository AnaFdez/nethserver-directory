#!/usr/bin/perl -w

#----------------------------------------------------------------------
# copyright (C) 1999-2005 Mitel Networks Corporation
#		
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
#----------------------------------------------------------------------

package esmith;

use strict;
use Errno;
use esmith::ConfigDB;
use esmith::util;
use Net::LDAP;

my $db = esmith::ConfigDB->open_ro or die "Could not open config db";

unless ($db->get('ldap')->prop('status') eq "enabled" )
{
    warn "Not running action script $0, LDAP service not enabled!\n";
    exit(0);
}

my $event = $ARGV [0];
my $name = $ARGV [1];

die "Username argument missing." unless defined ($name);

#------------------------------------------------------------
# Delete user from LDAP directory. First read LDAP password
#------------------------------------------------------------
my $pw = esmith::util::LdapPassword();
my $base = esmith::util::ldapBase ($db->get('DomainName')->value);

#------------------------------------------------------------
# Delete LDAP entry.
#------------------------------------------------------------
my $ldap = Net::LDAP->new('localhost')
    or die "$@";

$ldap->bind(
    dn => "cn=root,$base",
    password => $pw
);

my @search_args = ();
if ($event eq 'user-delete'){
	@search_args = ( base => "ou=Users,$base", filter => "uid=$name" );
}
elsif($event eq 'group-delete'){
	@search_args = ( base => "ou=Groups,$base", filter => "cn=$name" );
}
my $mesg = $ldap->search(@search_args);

$mesg->code && die "Failed ldap search: ", $mesg->error;

if ($mesg->count > 1)
{
    die("LDAP search for $name returned $mesg->count - 1 expected\n");
}

$ldap->delete($mesg->entry(0));

$ldap->unbind;

exit (0);
