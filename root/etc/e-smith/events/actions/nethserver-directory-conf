#!/usr/bin/perl

use NethServer::Directory;
use NethServer::Directory::LDAP;
use NethServer::Service;
use Net::LDAP;

#
# Ensure daemons are running
#
foreach my $daemon (qw(slapd nslcd)) {
    if(NethServer::Service::start($daemon) != 0) {
	sleep 1;
    } else {
	die("Could not start `$daemon`.\n");
    }
}


#
# Connect to LDAP server
#
my $ldap = NethServer::Directory::LDAP->new or die("Cannot connect LDAP server");
my $CertificateFile = "/etc/openldap/slapd.pem";
my $NslcdUid = getpwnam('nslcd');
my $LdapInternalSuffix = NethServer::Directory::getInternalSuffix(); 
my $LdapDomainSuffix = NethServer::Directory::getDomainSuffix(); 

#
# Load the rwm overlay, if missing
#
my $RewriterModule = `rpm -ql openldap-servers | grep 'rwm\.la\$'`;
chomp($RewriterModule);

my $olcModuleSearch = $ldap->search(
    base => 'cn=config',
    filter => "(&(cn=module{0})(olcModuleLoad={0}$RewriterModule))",
    attributes => ['olcModuleLoad']
    );

if ($olcModuleSearch->count() == 0) {
    my $ldapAddResponse = $ldap->add(
	'cn=module,cn=config',
	attrs => [
	    cn => 'module',
	    objectClass => 'olcModuleList',
	    olcModuleLoad => $RewriterModule	
	]
    );
    if($ldapAddResponse->is_error) {
	warn "`$RewriterModule` rwm module load error";
    }
}

my @aclList = (qq{to attrs=userPassword
                  by dn.exact="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage
                  by dn.exact="cn=pam,$LdapInternalSuffix" peername.path="/var/run/ldapi" write
                  by dn.exact="cn=libuser,$LdapInternalSuffix" peername.ip="127.0.0.1" write
                  by anonymous auth
                  by self write
                  by * none
             },
	     qq{to *
                  by dn.exact="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage
                  by dn.exact="cn=libuser,$LdapInternalSuffix" peername.ip="127.0.0.1" write
                  by users ssf=71 read
                  by * none
             });

# Compact the ACL removing any extra whitespace (should not harm):
s/\s+/ /g foreach(@aclList);

#
# Replace some global settings, access control setup:
#
my @configChangeList = (
    ['cn=config',
     replace => [
	 olcPasswordCryptSaltFormat => '$6$%.86s',
	 olcTLSCipherSuite => 'HIGH:MEDIUM:+SSLv2',
	 olcTLSCACertificateFile => $CertificateFile,
	 olcTLSCertificateFile => $CertificateFile,
	 olcTLSCertificateKeyFile => $CertificateFile,
	 olcTLSVerifyClient => 'never',
    ]],
    ['olcDatabase={-1}frontend,cn=config',
     replace => [olcPasswordHash => '{CRYPT}']],
    ['olcDatabase={2}bdb,cn=config',
     replace => [
	 olcSuffix => $LdapInternalSuffix,
	 olcAccess => [@aclList],
     ]]
    );

foreach(@configChangeList) {
    $ldap->modify(@{$_});
}

#
# Enable relay overlay 
# see man slapd-relay, man slapo-rwm
#
my $olcRelaySearch = $ldap->search(
    base => 'cn=config',
    scope => 'one',
    filter => '(olcDatabase={0}relay)',
    attributes => ['olcSuffix'],
    sizelimit => 1
    );

if($olcRelaySearch->count() == 0) {
    my $ldapAddRelayResponse = $ldap->add(
	'olcDatabase=relay,cn=config',
	attrs => [
	    objectClass => ['olcDatabaseConfig', 'olcRelayConfig', 'olcConfig'],
	    olcDatabase => 'relay',
	    olcSuffix => $LdapDomainSuffix,
	    olcAccess => [
		"to attrs=userPassword by anonymous ssf=71 auth by self ssf=71 read", 
		"to * by users read"
	    ]
	]);
    if($ldapAddRelayResponse->is_error) {	
	warn 'Error adding "relay" backend database: ' . $ldapAddRelayResponse->error;
    } else {
	addOverlayRwm();
    }
} 


#
# Add the rewriter module to relay backend
#
sub addOverlayRwm
{

    my $olcRelaySearch = $ldap->search(
	base => 'cn=config',
	scope => 'one',
	filter => '(olcDatabase={0}relay)',
	attributes => ['olcSuffix'],
	sizelimit => 1
	);


    if($olcRelaySearch->count() == 0) {
	warn 'Cannot find the relay database';
	return
    }

    #
    # Search for existing rwm overlay configurations:
    #
    my $relayDnSuffix = $olcRelaySearch->entry(0)->dn();
    my $olcOverlaySearch = $ldap->search(
	base => $relayDnSuffix,
	scope => 'one',
	filter => 'objectClass=olcRwmConfig',
	sizelimit => 1
	);

    if($olcOverlaySearch->count() == 0) {

	my $ldapAddOverlayResponse = $ldap->add(
	    'olcOverlay=rwm,' . $relayDnSuffix,
	    attrs => [
		objectClass => ['olcOverlayConfig', 'olcRwmConfig'],
		olcOverlay => 'rwm',
		olcRwmRewrite => 'rwm-suffixmassage "dc=directory,dc=nh"'
		]
	    );
	if($ldapAddOverlayResponse->is_error) {
	    warn "Error adding rewrite module overlay on `$relayDnSuffix`: " . 
		$ldapAddOverlayResponse;
	}

    }
}


$ldap->unbind;
