#!/usr/bin/perl -w

#----------------------------------------------------------------------
# copyright (C) 1999-2005 Mitel Networks Corporation
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
# Technical support for this program is available from Mitel Networks 
# Please visit our web site www.mitel.com/sme/ for details.
#----------------------------------------------------------------------

package esmith;

use strict;
use Errno;
use esmith::ConfigDB;
use esmith::AccountsDB;
use File::Path;

my $conf = esmith::ConfigDB->open_ro;
my $accounts = esmith::AccountsDB->open;
my $homeDirPrefix = '/home/e-smith/files/users/';

my $errors = 0;

my $event = shift;
my $userName = shift;

#------------------------------------------------------------
# Create the Unix account
#------------------------------------------------------------

die "username argument missing" unless defined ($userName);

my $acct = $accounts->get($userName);
unless (defined $acct and $acct->prop('type') eq "user")
{
    die "Account $userName is not a user account; create user failed.\n";
}

my $lock = undef;
my $uid;

# FIXME: assignment in conditional operator:
unless ($uid = $acct->prop('Uid'))
{
    use esmith::lockfile;

    $lock = esmith::lockfile::LockFileOrWait("/var/lib/nethserver/db/accounts");
    $uid = $accounts->get_next_uid;
    $acct->set_prop('Uid', $uid);
    $acct->set_prop('PasswordSet', 'no');
    $acct->set_prop('AllowRSSH', 'no');
    $acct->set_prop('VPNClientAccess', 'no');
}
my $gid = $acct->prop('Gid') || $uid;
my $shell = $acct->prop('Shell') || '/usr/libexec/openssh/sftp-server';

if( ! -x $shell) {
    warn "Given shell `$shell` is not executable";
    $errors ++;
    $shell = '/bin/false';
}

# Create the home directory prefix if still does not exists
if( ! -d $homeDirPrefix) {
    File::Path::make_path($homeDirPrefix);
}

# Create the user's unique group first
system(
	"/usr/sbin/lgroupadd",
	"-g",
	$gid,
	$userName
    ) == 0 or die "Failed to create user private group account `$userName`.\n";

# Now create the user account. `--surname` triggers inetOrgPerson
# schema in ldapEntry and is required for nethserver-directory to
# work.
system(
	"/usr/sbin/luseradd",
	"-u", $uid,
	"-g", $uid,
        '--surname', $userName,
	'-d', $homeDirPrefix . $userName,
	"-k", "/etc/skel/",
	"-s", $shell,
	$userName
    ) == 0 or die "Failed to create user account `$userName`.\n";

# Release lock if we have one
$lock && esmith::lockfile::UnlockFile($lock);

# Set initial permissions on user's root directory.
chmod 0700, $homeDirPrefix . $userName;

if(system('/usr/sbin/lusermod', '-L', $userName) != 0) {
    warn("Could not lock password for user `$userName`.\n");
    $errors ++;
}

$acct->set_prop('__state', 'new');

exit ($errors == 0 ? 0 : 1);
