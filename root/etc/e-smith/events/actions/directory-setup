#!/usr/bin/perl

use NethServer::Directory;
use esmith::ConfigDB;
use esmith::util;
use Net::LDAP;

my $configDb = esmith::ConfigDB->open_ro();

my $CertificateFile = "/etc/openldap/slapd.pem";
my $DomainName = $configDb->get_value('DomainName') || 'locahost.localdomain';
my $NslcdUid = getpwnam('nslcd');
my $LdapInternalSuffix = 'dc=directory,dc=nh';
my $LdapDomainSuffix = esmith::util::ldapBase($DomainName);

#
# Ensure slapd is running
#
qx(service slapd status >/dev/null);
if ( $? != 0 ) {
    qx(service slapd start);
    sleep 1;
}

#
# Connect to LDAP server
#
my $ldap = NethServer::Directory::bindLdap;

#
# Load the rwm overlay, if missing
#
my $RewriterModule = `rpm -ql openldap-servers | grep 'rwm\.la\$'`;
chomp($RewriterModule);

my $olcModuleSearch = $ldap->search(
    base => 'cn=config',
    filter => "(&(cn=module{0})(olcModuleLoad={0}$RewriterModule))",
    attributes => ['olcModuleLoad']
    );

if ($olcModuleSearch->count() == 0) {
    my $ldapAddResponse = $ldap->add(
	'cn=module,cn=config',
	attrs => [
	    cn => 'module',
	    objectClass => 'olcModuleList',
	    olcModuleLoad => $RewriterModule	
	]
    );
    if($ldapAddResponse->is_error) {
	warn "`$RewriterModule` rwm module load error";
    }
}


#
# Replace some global settings
#
my @configChangeList = (
    ['cn=config',
     replace => [
	olcPasswordCryptSaltFormat => '$6$%.86s',
	olcTLSCipherSuite => $CertificateFile,
	olcTLSCACertificateFile => $CertificateFile,
	olcTLSCertificateFile => $CertificateFile,
	olcTLSCertificateKeyFile => $CertificateFile,
	olcTLSVerifyClient => 'never'
    ]],
    ['olcDatabase={-1}frontend,cn=config',
     replace => [olcPasswordHash => '{CRYPT}']],
    ['olcDatabase={2}bdb,cn=config',
     replace => [
	 olcSuffix => $LdapInternalSuffix,
	 olcAccess => [
	     qq{to * by dn.regex="^gidNumber=[0-9]+\\+uidNumber=(0|$NslcdUid),cn=peercred,cn=external,cn=auth\$" manage by * break},
	     q{to attrs=userPassword by anonymous auth by * break},
	     q{to attrs=entry,@shadowAccount,@posixAccount,@account  by anonymous read}
	 ]
     ]]
    );

foreach(@configChangeList) {
    my $ldapConfigResponse = $ldap->modify(@{$_});
    if($ldapConfigResponse->is_error) {
	warn 'error modifying ' . @{$_} . ' ' . $ldapConfigResponse->error ;
    }
}

#
# Enable relay overlay 
# see man slapd-relay, man slapo-rwm
#
my $olcRelaySearch = $ldap->search(
    base => 'cn=config',
    scope => 'one',
    filter => '(olcDatabase={0}relay)',
    attributes => ['olcSuffix'],
    sizelimit => 1
    );

if($olcRelaySearch->count() == 0) {
    my $ldapAddRelayResponse = $ldap->add(
	'olcDatabase=relay,cn=config',
	attrs => [
	    objectClass => ['olcDatabaseConfig', 'olcRelayConfig', 'olcConfig'],
	    olcDatabase => 'relay',
	    olcSuffix => $LdapDomainSuffix
	]
	);
    if($ldapAddRelayResponse->is_error) {	
	warn 'Error adding relay database: ' . $ldapAddRelayResponse->error;
    } else {
	addOverlayRwm();
    }
} 

sub addOverlayRwm
{

    my $olcRelaySearch = $ldap->search(
	base => 'cn=config',
	scope => 'one',
	filter => '(olcDatabase={0}relay)',
	attributes => ['olcSuffix'],
	sizelimit => 1
	);


    if($olcRelaySearch->count() == 0) {
	warn 'Cannot find the relay database';
	return
    }

    #
    # Search for existing rwm overlay configurations:
    #
    my $relayDnSuffix = $olcRelaySearch->entry(0)->dn();
    my $olcOverlaySearch = $ldap->search(
	base => $relayDnSuffix,
	scope => 'one',
	filter => 'objectClass=olcRwmConfig',
	sizelimit => 1
	);

    if($olcOverlaySearch->count() == 0) {

	my $ldapAddOverlayResponse = $ldap->add(
	    'olcOverlay=rwm,' . $relayDnSuffix,
	    attrs => [
		objectClass => ['olcOverlayConfig', 'olcRwmConfig'],
		olcOverlay => 'rwm',
		olcRwmRewrite => 'rwm-suffixmassage "dc=directory,dc=nh"'
		]
	    );
	if($ldapAddOverlayResponse->is_error) {
	    warn "Error adding rewrite module overlay on `$relayDnSuffix`: " . 
		$ldapAddOverlayResponse;
	}

    }
}


$ldap->unbind;
