#!/usr/bin/perl -w
#----------------------------------------------------------------------
# Copyright (C) 2002 Mitel Networks Corp.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#
# Technical support for this program is available from Mitel Networks.
# For details, please visit our web site at www.mitel.com/sme/
#----------------------------------------------------------------------

use strict;
use esmith::event;
use esmith::AccountsDB;

my $event = shift;
my $userName = shift or die "Missing user argument!";
my $accountsDb = esmith::AccountsDB->open() or die "Unable to open accounts db: $!";

# Make a list of account db groups that this user was a member of, according to unix db:
my @oldGroups = ();
foreach (split(' ', `/usr/bin/groups $userName`)) {
    my $type = $accountsDb->get_prop($_, 'type');
    if(defined $type && $type eq 'group') {
	push @oldGroups, $_;
    }
}

# Combine the previous and the current membership sets:
my %groups = ();

foreach (@oldGroups, $accountsDb->user_group_list($userName)) {
    $groups{$_} ++;
}

# Signal group modify excluding the two set intersection
foreach (keys %groups) {
    if(defined $groups{$_} && $groups{$_} == 1) {
	warn 'INFO: update user membership of group ' . $_ . ".\n";
	event_signal("group-modify", $_);
    }
}


