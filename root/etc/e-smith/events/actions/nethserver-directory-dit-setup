#!/usr/bin/perl
#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use NethServer::Directory;
use esmith::ConfigDB;

my $ldap = NethServer::Directory->new;
my $configDb = esmith::ConfigDB->open_ro() || die('Could not open ConfigDB');
my %OrganizationContact = $configDb->get('OrganizationContact')->props or {'Company' => 'Not Set'};
my $LdapInternalSuffix = NethServer::Directory::getInternalSuffix();

#
# DIT (Directory Information Tree) setup 
#
my %OrganizationContact = $configDb->get('OrganizationContact')->props or {'Company' => 'Not Set'};

my $nsstestId = getNssTestId();

my @entries = (
    [ $LdapInternalSuffix,
      attrs => [
	  objectClass => ['top', 'dcObject', 'organization'],
	  dc => 'directory',
	  o => $OrganizationContact{Company},
      ] ],    
    [ 'ou=People,' . $LdapInternalSuffix,
      attrs => [
	  objectClass => ['top', 'organizationalUnit'],
	  ou => 'People',
      ] ],
    [ 'ou=Groups,' . $LdapInternalSuffix,
      attrs => [
	  objectClass => ['top', 'organizationalUnit'],
	  ou => 'Groups',
      ] ],
    [ 'uid=nsstest,ou=People,' . $LdapInternalSuffix,
      attrs => [
	  gidNumber => $nsstestId,
	  uidNumber => $nsstestId,
	  qw(
	    objectClass posixAccount
	    objectClass shadowAccount
	    objectClass account
	    uid nsstest
	    cn nsstest
	    shadowMin 0
	    shadowMax 99999
	    shadowWarning 7
	    shadowExpire -1
	    shadowInactive -1
	    userPassword {CRYPT}!!
	    gecos LibNss_Test_Account
	    shadowLastChange 0
	    shadowFlag -1
	    homeDirectory /var/lib/nethserver/home/nsstest
	    loginShell /bin/false
      )] ],
    [ 'cn=nsstest,ou=Groups,' . $LdapInternalSuffix,
      attrs => [
	  gidNumber => $nsstestId,	  
	  qw(
	    objectClass posixGroup
	    cn nsstest
    )] ],
    );


foreach(@entries) {
    my $message = $ldap->merge(@{$_});
    if($message->is_error) {
	warn 'Error modifying `' . @{$_}[0] . '`: ' . join(" ", $message->code, $message->error_name());
	$errors++;
    }
}

#
# Create pam and libuser internal accounts (ACL permissions are
# configured below).
#
$ldap->configServiceAccount('libuser') || $errors++;
$ldap->configServiceAccount('pam') || $errors++;

#
# Configure default ACLs:
#
$ldap->enforceAccessDirective(
    join(' ',
	 qq(by dn.exact="cn=pam,$LdapInternalSuffix" peername.path="/var/run/ldapi" write),
	 qq(by dn.exact="cn=libuser,$LdapInternalSuffix" peername.ip="127.0.0.1" write),
	 qq(by users ssf=71 read),
	 qq(by * none)),
    '*'
    ) || $errors++;

$ldap->enforceAccessDirective(
    join(' ',    
	 qq(by dn.exact="cn=pam,$LdapInternalSuffix" peername.path="/var/run/ldapi" write),
	 qq(by dn.exact="cn=libuser,$LdapInternalSuffix" peername.ip="127.0.0.1" write),
	 qq(by anonymous auth),
	 qq(by self write),
	 qq(by * none)), 
    'userPassword'
    ) || $errors++;


exit($errors);



sub getNssTestId()
{
    my $entry = $ldap->getUser('nsstest');

    if( ! $entry ) {
	return $ldap->getFreeId();
    }

    return $entry->get_value('uidNumber');
}
