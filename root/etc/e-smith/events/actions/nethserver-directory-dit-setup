#!/usr/bin/perl

use NethServer::Directory;
use NethServer::Directory::LDAP;
use esmith::ConfigDB;

my $ldap = NethServer::Directory::LDAP->new;
my $configDb = esmith::ConfigDB->open_ro();
my %OrganizationContact = $configDb->get('OrganizationContact')->props or {'Company' => 'Not Set'};
my $internalSuffix = NethServer::Directory::getInternalSuffix();

my @entries = (
    [ $internalSuffix,
      attrs => [
	  objectClass => ['top', 'dcObject', 'organization'],
	  dc => 'directory',
	  o => $OrganizationContact{Company},
      ] ],    
    [ 'ou=People,' . $internalSuffix,
      attrs => [
	  objectClass => ['top', 'organizationalUnit'],
	  ou => 'People',
      ] ],
    [ 'ou=Groups,' . $internalSuffix,
      attrs => [
	  objectClass => ['top', 'organizationalUnit'],
	  ou => 'Groups',
      ] ],

    #
    # authentication services accounts (replace with SASL whenever possible):
    #

    [ 'cn=libuser,' . $internalSuffix,
      attrs => [
	  objectClass => ['device', 'simpleSecurityObject'],
	  cn => 'libuser',
	  userPassword => NethServer::Directory::getUserPassword('libuser', 1, $ldap),
	  description => "libuser account management"
      ] ],
    [ 'cn=pam,' . $internalSuffix,
      attrs => [
	  objectClass => ['device', 'simpleSecurityObject'],
	  cn => 'pam',
	  userPassword => NethServer::Directory::getUserPassword('pam', 1, $ldap),
	  description => "pam_ldap module - root password service operations"
      ] ],
    );

my $exitCode = 0;

foreach(@entries) {
    my $message = $ldap->merge(@{$_});
    if($message->is_error) {
	warn 'Error modifying `' . @{$_}[0] . '`: ' . join(" ", $message->code, $message->error_name());
	$exitCode ++;
    }
}

exit($exitCode);
