#!/usr/bin/perl -w

#----------------------------------------------------------------------
# copyright (C) 2002-2005 Mitel Networks Corporation
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
# Technical support for this program is available from Mitel Networks 
# Please visit our web site www.mitel.com/sme/ for details.
#----------------------------------------------------------------------

package esmith;

use strict;
use Errno;
use esmith::ConfigDB;
use esmith::AccountsDB;

my $a = esmith::AccountsDB->open_ro || die "Couldn't open accounts db\n";

my $errors = 0;
my $event = shift || die "Event name arg missing\n";

# multiple group name arguments are allowed for
# backward-compatibility, but produce a warning.
my @groups = @ARGV;

if (scalar(@groups) == 0) {
    warn "Group name is missing, assuming all account db group entries";
    @groups = $a->groups();
} elsif (scalar(@groups) > 1) {
    warn "DEPRECATED: Multiple group name arguments are deprecated!";
}

foreach my $groupName (@groups) 
{
    my $group = $a->get($groupName);
    if (! $group || $group->prop('type') ne 'group')
    {
	warn "Account $groupName is not a group account.\n";
	next;
    }
    my %properties = $group->props;

    #------------------------------------------------------------
    # Modify the group. We do it the hard way - by removing all the
    # current group members and adding the new ones (rather than
    # deleting the group and recreating it). That guarantees that
    # we keep the same group ID so that files associated with this
    # group are unaffected.
    #------------------------------------------------------------

    my $groupDesc = $properties{'Description'} || $groupName;

    # gecos must be 7bit ASCII/ldap IA5String. Refs #911
    $groupDesc =~ s/[^\x20-\x7F]//g;

    if(system("/usr/sbin/lusermod", '-c', $groupDesc, $groupName) != 0) {
	warn "Failed to modify group description for $groupName.\n";
	$errors ++;
    }

    my ($name, $passwd, $gid, $members) = getgrnam ($groupName);

    # admin user is never removed. This permits lgroupmod to complete
    # the group modification. lgroupmod fails silently if all members
    # are removed! Refs #913
    my @oldMembersList = grep { !/^admin$/ } split (/\s+/, $members);
    my $oldMembers = join (',', sort (@oldMembersList));
    my $newMembers = $properties {'Members'}; 

    if(system("/usr/sbin/lgroupmod", "-m", $oldMembers, $groupName) != 0) {
        warn "Failed to remove old members from group $groupName.\n";
	$errors ++;
    }

    if(system("/usr/sbin/lgroupmod", "-M", $newMembers, $groupName) != 0) {
        warn "Failed to add new members from group $groupName.\n";
	$errors ++;
    }
}

exit ($errors == 0 ? 0 : 1);
